#!/command/with-contenv sh

. /app/cloudflare.sh # Loading script with all functions

# Load ZONE and SUBDOMAIN vars from Docker Swarm secrets, if available:
if [ -f "$SUBDOMAIN_FILE" ]; then
  SUBDOMAIN=$(cat $SUBDOMAIN_FILE | tr -s "\n" ",")
fi
if [ -f "$ZONE_FILE" ]; then
  ZONE=$(cat $ZONE_FILE)
fi

# Verify the $EMAIL and $API_KEY env variables are valid
statusCode=$(verifyToken)

if [ "$statusCode" != "200" ]; then
  echo "----------------------------------------------------------------"
  echo "ERROR: Invalid CloudFlare Credentials - $statusCode"
  echo "----------------------------------------------------------------"
  if [ ! -z "$EMAIL" ]; then
    echo "Make sure the EMAIL and API_KEY variables are correct. You can"
    echo "get your CloudFlare API Key here:"
    echo "https://www.cloudflare.com/a/profile"
    echo
    echo "If you are using a zone token please remove the EMAIL variable"
    echo "from this container."
  else
    echo "Make sure the API_KEY is correct. You can"
    echo "get your scoped CloudFlare API Token here:"
    echo "https://dash.cloudflare.com/profile/api-tokens"
  fi
  echo
  echo "----------------------------------------------------------------"
  exit 1
fi

# Get the ID of the zone from the CloudFlare API
CFZoneId=$(getZoneId)

if [ "$CFZoneId" == "null" ]; then
  echo "----------------------------------------------------------------"
  echo "ERROR: Zone for $ZONE was not found in your CloudFlare Account"
  echo "----------------------------------------------------------------"
  echo "Make sure the ZONE variable is correct and the domain exists"
  echo "in your CloudFlare account. You can add a new domain here:"
  echo
  echo "https://www.cloudflare.com/a/add-site"
  echo "----------------------------------------------------------------"
  exit 1
fi

echo "DNS Zone: $ZONE ($CFZoneId)"
# Check we can get the current public ip address
PublicIpAddress=$(getPublicIpAddress)
if [ ! -z ${INTERFACE+x} ]; then #Getting IP address from set net. interface
  PublicIpAddress=$(getLocalIpAddress)
fi

if [ "$PublicIpAddress" == "" ]; then
  echo "----------------------------------------------------------------"
  if [ "$IP_TYPE" == "6" ]; then
    echo "ERROR: Failed To Get Public IPv6 Address"
    echo "----------------------------------------------------------------"
    echo "You must be running Docker with IPv6 support enabled or this"
    echo "container with host networking enabled."
    echo
    echo "Add '--net=host' to your docker run command or if using"
    echo "docker-compose add 'network_mode: host' to this service."
  else
    echo "ERROR: Failed To Get Public IPv4 Address"
  fi
  echo "----------------------------------------------------------------"
  exit 1
fi

# Get the ID of each the dns records from the CloudFlare API
CFDnsOutput=""
CFDnsRecordNames="$(getDnsRecordName | tr -s ',' ' ')"
set -o noglob
for CFDnsRecordName in $CFDnsRecordNames; do
  CFDnsRecordId=$(getDnsRecordId $CFZoneId $CFDnsRecordName $RRTYPE)

  # If the dns record does not exist, create it now.
  if [ "$CFDnsRecordId" == "null" ] && [ "$RRTYPE" != "PTR" ]; then
    echo "DNS record for '$CFDnsRecordName' was not found in $ZONE zone. Creating now..."
    CFDnsRecordId=$(createDnsRecord $CFZoneId $CFDnsRecordName $PublicIpAddress)

    if [ "$CFDnsRecordId" == "null" ]; then
      echo "----------------------------------------------------------------"
      echo "ERROR: Failed to create DNS record '$CFDnsRecordName'"
      echo "----------------------------------------------------------------"
      exit 1
    fi

    # Calling webhook
    #webhook -X POST --data "{\"content\": \"$CFDnsRecordName created with IP $PublicIpAddress\"}" "$WEBHOOK_URL"
  fi

  echo "DNS Record: $CFDnsRecordName ($CFDnsRecordId)"
  if [ ! -z "$CFDnsOutput" ]; then
    CFDnsOutput="$CFDnsOutput,$CFDnsRecordName=$CFDnsRecordId"
  else
    CFDnsOutput="$CFDnsRecordName=$CFDnsRecordId"
  fi
done

echo "Creating setup cloudflare file with these params: CF_ZONE_ID=\"$CFZoneId\" CF_RECORDS=\"$CFDnsOutput\""
echo "CF_ZONE_ID=\"$CFZoneId\" CF_RECORDS=\"$CFDnsOutput\"" > /config/cloudflare.conf

echo "$CRON	/etc/cont-init.d/50-ddns" > /var/spool/cron/crontabs/root
